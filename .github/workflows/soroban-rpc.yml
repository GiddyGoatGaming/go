name: Soroban RPC

on:
  push:
    branches: [master]
  pull_request:

jobs:

  integration:
    name: Integration tests
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
            go_arch: amd64
          - os: ubuntu-latest
            rust_target: aarch64-unknown-linux-gnu
            go_arch: arm64
          - os: macos-latest
            rust_target: x86_64-apple-darwin
            go_arch: amd64
          - os: macos-latest
            rust_target: aarch64-apple-darwin
            go_arch: arm64
          - os: windows-latest
            rust_target: x86_64-pc-windows-gnu
            go_arch: amd64
    runs-on: ${{ matrix.os }}
    env:
      SOROBAN_RPC_INTEGRATION_TESTS_ENABLED: true
      SOROBAN_RPC_INTEGRATION_TESTS_CAPTIVE_CORE_BIN: /usr/bin/stellar-core
      PROTOCOL_19_CORE_DEBIAN_PKG_VERSION: 19.4.0-1075.39bee1a2b.focal
    steps:
      - uses: actions/checkout@v3
        with:
          # For pull requests, build and test the PR head not a merge of the PR with the destination.
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          # We need to full history for git-restore-mtime to know what modification dates to use.
          # Otherwise, the Go test cache will fail (due to the modification time of fixtures changing).
          fetch-depth: '0'

      - uses: ./.github/actions/setup-go
        with:
          go-version: 1.19.1

      - run: rustup update
      - run: rustup target add ${{ matrix.rust_target }}
      # Set cross compiler for linux aarch64
      - if: matrix.rust_target == 'aarch64-unknown-linux-gnu'
        name: Install C cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-12-aarch64-linux-gnu
          echo 'CC=aarch64-linux-gnu-gcc-12' >> $GITHUB_ENV]

      - name: Build Soroban RPC reproducible build
        run: |
          cd ./exp/services/soroban-rpc && make
          touch empty

      # Since we need to install Captive Core, only run tests on x86_64-unknown-linux-gnu
      - if: matrix.rust_target == 'x86_64-unknown-linux-gnu'
        name: Install Captive Core
        run: |
          # Workaround for https://github.com/actions/virtual-environments/issues/5245,
          # libc++1-8 won't be installed if another version is installed (but apt won't give you a helpful
          # message about why the installation fails)
          sudo apt-get remove -y libc++1-10 libc++abi1-10 || true
          
          sudo wget -qO - https://apt.stellar.org/SDF.asc | APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=true sudo apt-key add -
          sudo bash -c 'echo "deb https://apt.stellar.org focal unstable" > /etc/apt/sources.list.d/SDF-unstable.list'
          sudo apt-get update && sudo apt-get install -y stellar-core="$PROTOCOL_19_CORE_DEBIAN_PKG_VERSION"
          echo "Using stellar core version $(stellar-core version)"
      - if: matrix.rust_target == 'x86_64-unknown-linux-gnu'
        name: Run Soroban RPC Tests
        run: go test -race -timeout 25m -v ./exp/services/soroban-rpc/internal/test/...
